// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======================================
// MODEL BARU UNTUK OTENTIKASI DAN AKSES
// ======================================

model User {
  id        String    @id @default(cuid())
  name      String
  username  String    @unique
  password  String // Akan selalu di-hash
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relasi ke Role
  roleId    String
  role      Role      @relation(fields: [roleId], references: [id])

  // Relasi ke Booking
  checkedInBookings  Booking[] @relation("CheckedInBy")
  checkedOutBookings Booking[] @relation("CheckedOutBy")
}

model Role {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  
  users       User[]
  permissions RolePermission[]
}

model Permission {
  id          String    @id @default(cuid())
  name        String    @unique // e.g., "rooms:read", "rooms:create"
  description String?

  roles       RolePermission[]
}

// Tabel penghubung untuk relasi Many-to-Many
model RolePermission {
  roleId       String
  permissionId String
  
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}


// MODEL UNTUK DATA MASTER KAMAR
model Room {
  id          String   @id @default(cuid())
  roomNumber  String   @unique
  floor       Int
  
  // Ganti baris 'type' yang lama dengan relasi ini
  roomTypeId  String
  roomType    RoomType @relation(fields: [roomTypeId], references: [id])
  
  status      RoomStatus @default(AVAILABLE)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images      RoomImage[]
  bookings    Booking[]
}

enum RoomStatus {
  AVAILABLE // AVAILABLE
  OCCUPIED  // Terisi
  MAINTENANCE // Dalam Perbaikan
}

model RoomType {
  id            String @id @default(cuid())
  name          String @unique
  priceHalfDay  Float
  priceFullDay  Float
  
  rooms         Room[]
}

// Model untuk menyimpan URL foto kamar
model RoomImage {
  id        String   @id @default(cuid())
  url       String
  roomId    String
  createdAt DateTime @default(now())

  // Relasi ke model Room
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
}


// MODEL UTAMA UNTUK TRANSAKSI BOOKING
model Booking {
  id                 String       @id @default(cuid())
  guestName          String       // Nama Wali Santri
  guestPhone         String?
  studentName        String
  addressId          String       // ID Kabupaten dari API
  addressLabel       String?      // <-- TAMBAHKAN BARIS INI
  checkIn            DateTime     @default(now())
  checkOut           DateTime?    // Bisa null saat belum checkout
  expectedCheckOut   DateTime     // Waktu seharusnya checkout
  bookingType        BookingType  // <-- PASTIKAN BARIS INI ADA
  durationInDays   Int         @default(0) // <-- default 0
  baseFee            Float        // Tarif dasar kamar
  lateFee            Float?       // Denda keterlambatan
  totalFee           Float        // Total biaya (dasar + denda + sanksi)
  paymentMethod    PaymentMethod?
  paymentStatus    PaymentStatus?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relasi
  roomId             String
  room               Room         @relation(fields: [roomId], references: [id])
  checkedInById      String
  checkedInBy        User         @relation("CheckedInBy", fields: [checkedInById], references: [id])
  checkedOutById     String?
  checkedOutBy       User?        @relation("CheckedOutBy", fields: [checkedOutById], references: [id])
  
  // Relasi ke denda barang
  charges            BookingCharge[]
}

enum PaymentMethod {
  CASH
  TRANSFER
}

enum PaymentStatus {
  PAID   // Lunas
  UNPAID // Belum Lunas
}

enum BookingType {
  HALF_DAY // Setengah Hari
  FULL_DAY // Satu Hari
}


// MODEL UNTUK MASTER ITEM SANKSI
model ChargeableItem {
  id           String  @id @default(cuid())
  itemName     String  @unique
  chargeAmount Float

  // Relasi
  bookings     BookingCharge[]
}

// MODEL UNTUK MENCATAT SANKSI PER BOOKING
model BookingCharge {
  id             String @id @default(cuid())
  quantity       Int    @default(1)
  
  // Relasi
  bookingId      String
  booking        Booking @relation(fields: [bookingId], references: [id])
  chargeableItemId String
  chargeableItem ChargeableItem @relation(fields: [chargeableItemId], references: [id])
}